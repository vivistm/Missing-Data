---
title: "Quadratic"
format: html
editor: visual
---

# Function for calculating bias and coverage

```{r}
#| echo: false
pacman::p_load("VIM","rgl","MASS","tidyverse","mice","MASS","tictoc")
```

```{r}
calculate_metrics <-
  function(coefficients, true_beta, ci_value = 1.96) { 
    bias <- true_beta - coefficients$estimate

    ci_lower <- coefficients$estimate - ci_value  * coefficients$std.error
    ci_upper <- coefficients$estimate + ci_value  * coefficients$std.error
    cov <- ci_lower <= true_beta & true_beta <= ci_upper

    metrics <- cbind(coefficients, bias, cov) 
}
```

Imputate missing data (Squared)

```{r}
quadratic_data <- function(seed){
  #set.seed(seed)
  p <- 4  # Variabels
  n <- 500 # Observations
  
  mu <- (runif(p,1,5)) # Expected Values
  
  V <- matrix(0.5,p,p)   # correlation of 0.5 betweenn all 4 variables
  diag(V) <- 1           # variance of 1         
  
  # Datenframe
  x_df_org <- mvrnorm(n, mu, V) %>% data.frame()
  names(x_df_org) <- paste0("x_", 1:4)
  x_df_org$x1_squared <- x_df_org[, 1]^2 # transform
  mu[p+1] <- mu[1]^2
  
  true_beta <- c(1, 1.5, -0.8, 0.5, 0.2,0.4)  
  # c(intercept, b1,b2,b3,b4,b_interaction))
  
  x_matrix_org <- as.matrix(x_df_org)
  X_full <- cbind(1, x_matrix_org)  # add intercept
  Y <- X_full %*% true_beta + rnorm(n,0,1)
  data_sqrt<- cbind(x_df_org,Y)
  
  ### MAR Pattern-----------------------------------------------------
  data_sqrt_mar <- data_sqrt

  miss_obs_x1 <- 0.5 + 2 * data_sqrt_mar$x_2 - 0.7 * data_sqrt_mar$x_3 + rnorm(n, 0, 3)
  mis_mar_p <- miss_obs_x1 < quantile(miss_obs_x1, 0.3)
  data_sqrt_mar$x_1[mis_mar_p] <- NA
  data_sqrt_mar$x1_squared <- data_sqrt_mar$x_1^2 # Na's for X_squared
  data_sqrt_mar
  return(list("MAR" = data_sqrt_mar, 
              "BD" = data_sqrt))
}


```

# Imputate missing data (Squared)

```{r}
results_of_all_methods <- list (
  "pmm_imp_first" = list(),
  "pmm_trans_first" = list(),
  "pmm_poly_method" = list(),# Da geht glaube ich nur mit pmmm (also default wird das verwendet)
  "rf_imp_first" = list(),
  "rf_trans_first" = list(),
  "bd" = list(),
  "cc" = list()
  #"cart_poly_com = list()
)

iterations <- 1000 #1000
n_imp <- 40
set.seed(123)
tic()
for (i in 1:iterations) {
  
  true_beta <- c(1, 1.5, -0.8, 0.5, 0.2,0.4) 
  data <- quadratic_data() #Generating data
  
  ### Before Deletion ####
  data_BD <- data$BD
  lm_BD <- lm(Y~., data = data_BD)
  coeff_BD <- data.frame("estimate" = coef(lm_BD),
                          "std.error" = summary(lm_BD)$coefficients[,2])
  
  results_of_all_methods[["bd"]][[i]] <- 
    calculate_metrics(coeff_BD, true_beta)
  
  
  ### Complete Case Analysis ###
  data <- data$MAR
  data_cc<- na.omit(data)
  lm_CC <- lm(Y~., data = data_cc)
  coeff_CC <- data.frame("estimate" = coef(lm_CC),
                         "std.error"= summary(lm_CC)$coefficients[,2])
  
  results_of_all_methods[["cc"]][[i]] <- 
    calculate_metrics(coeff_CC, true_beta)
  
  ##Impute, then transform----------------------------------------------
 
  
  #ImpData <- mice(data) # in den Daten ist die Transformierte Variable
  imp_data_pmm_imp_first <- mice(data[, -which(names(data) == "x1_squared")], m = n_imp, print = FALSE)
  model_pmm_imp_first <- with(imp_data_pmm_imp_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + I(x_1 ^ 2)))
  
  pooled_pmm_imp_first <- pool(model_pmm_imp_first)
  coeff_pmm_imp_first <- summary(pooled_pmm_imp_first)

  results_of_all_methods[["pmm_imp_first"]][[i]] <-
    calculate_metrics(coeff_pmm_imp_first, true_beta) #Frage: Reicht es diese Werte abzuspeichern oder brauchen wir noch mehr?


#   #Transform then impute----------------------------------
# 
#   ### Idee:
  pred <- make.predictorMatrix(data)
  pred["x_1", "x1_squared"] <- 0
  pred["x1_squared", "x_1"] <- 0

  imp_data_pmm_trans_first <- mice(data,pred = pred, print = FALSE, m = n_imp)


  model_pmm_trans_first <-
    with(imp_data_pmm_trans_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x1_squared))
  pooled_pmm_trans_first <- pool(model_pmm_trans_first)
  coeff_pmm_trans_first <- summary(pooled_pmm_trans_first)


  results_of_all_methods[["pmm_trans_first"]][[i]] <-
    calculate_metrics(coeff_pmm_trans_first, true_beta)
  
  # Polynomialcombination
  ini <- mice(data, maxit = 0) # nur um Pred und Meth zu erstellen
  meth<- ini$method
  meth["x_1"] <- "quadratic"
  meth["x1_squared"] <- "~I(x_1^2)"
  pred <- ini$pred
  pred[, "x1_squared"] <- 0
  
  imp_data_poly_com <- mice(data,method = meth,pred = pred,quad.outcome ="Y", m = n_imp, print = FALSE)
  model_poly_com <- with(imp_data_poly_com, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x1_squared))
  pooled_poly_com <- pool(model_poly_com)
  coeff_poly_com <- summary(pooled_poly_com)


  results_of_all_methods[["pmm_poly_method"]][[i]] <-
    calculate_metrics(coeff_poly_com, true_beta)
  
  # Impute, then transform (RF)-------------------
  
  imp_data_rf_imp_first <- mice(data[, -which(names(data) == "x1_squared")], method = "cart", m = n_imp, print = FALSE)

  model_rf_impute_first <- with(imp_data_rf_imp_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + I(x_1 ^ 2)))

  
  pooled_rf_imp_first <- pool(model_rf_impute_first)
  coeff_rf_imp_first <- summary(pooled_rf_imp_first)

  results_of_all_methods[["rf_imp_first"]][[i]] <-
    calculate_metrics(coeff_rf_imp_first, true_beta) 
  
  # Transform, then impute (RF)-------------------
  pred <- make.predictorMatrix(data)
  pred["x_1", "x1_squared"] <- 0
  pred["x1_squared", "x_1"] <- 0

  imp_data_rf_trans_first <- mice(data,method = "cart",pred = pred, print = FALSE, m = n_imp)

  model_rf_trans_first <-
    with(imp_data_rf_trans_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x1_squared))
  pooled_rf_trans_first <- pool(model_rf_trans_first)
  coeff_rf_trans_first <- summary(pooled_rf_trans_first)

  results_of_all_methods[["rf_trans_first"]][[i]] <-
    calculate_metrics(coeff_rf_trans_first, true_beta)
  print(i)
}
toc()
zeit <- toc()
save.image(file='Environment_Q_n_imp.RData')

```

# Calculate averages over all iterations of one method

```{r}

all_average_results <- list()

for (method_name in names(results_of_all_methods)) {
  method <- results_of_all_methods[[method_name]]
  avg_results <- data.frame(estimate = numeric(0), bias = numeric(0), coverage = numeric(0))

  for (covariate in row.names(method[[1]])) {
    coefficient <- mean(sapply(method, function(df)
        df[covariate, "estimate"]))
    bias <- mean(sapply(method, function(df)
        df[covariate, "bias"]))
    coverage <- mean(sapply(method, function(df)
        df[covariate, "cov"]))
    se <- mean(sapply(method, function(df)
      df[covariate, "std.error"]))

    # Create a new data frame for the row to bind
    new_row <- data.frame(estimate = coefficient, bias = bias, coverage = coverage, se = se)

    # Bind the row while preserving column names
    avg_results <- rbind(avg_results, new_row)

    # Assign the row name
    row.names(avg_results)[nrow(avg_results)] <- covariate
  }
  all_average_results[[method_name]] <- avg_results
}

```

# Summary of results

```{r}
covariates_names <- c("Intercept", "X1", "X2", "X3", "X4", "X1^2")

# Alle Koeffizienten gemeinsam ausgeben
all_coefficients <- sapply(all_average_results, function(df)
  df[,"estimate"])
rownames(all_coefficients) <- covariates_names

# Alle Biases ausgeben
all_biases <- sapply(all_average_results, function(df)
  df[,"bias"])
rownames(all_biases) <- covariates_names


# Alle Coverages ausgeben
all_coverages <- sapply(all_average_results, function(df)
  df[,"coverage"])
rownames(all_coverages) <- covariates_names

all_se <- sapply(all_average_results, function(df)
  df[,"se"])
rownames(all_se) <- covariates_names


```
