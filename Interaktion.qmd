---
title: "Interaction"
format: html
editor: visual
---

```{r}
#| echo: false
pacman::p_load("VIM","rgl","MASS","tidyverse","mice","MASS")
```


# Function for calculating bias and coverage

```{r}
calculate_metrics <-
  function(coefficients, true_beta, ci_value = 1.96) {
    bias <- true_beta - coefficients$estimate

    ci_lower <- coefficients$estimate - ci_value  * coefficients$std.error
    ci_upper <- coefficients$estimate + ci_value  * coefficients$std.error
    cov <- ci_lower <= true_beta & true_beta <= ci_upper

    metrics <-
      cbind(coefficients, bias, cov) 
    # man könnte überlegen, auch noch die CI grenzen zu speichern
}
```

# Function Generated Data (Interaction)
```{r}
interaction_data <- function(seed){
  set.seed(i)
  p <- 4    #variables
  n <- 1000 #observations
  
  # draw expected values:
  mu <- (runif(p,-1,5))
  A <- matrix(rnorm(p^2), p, p)
  A <- t(A) %*% A             
  V <- cov2cor(A)           
  
  # Datenframe
  x_df_org <- mvrnorm(n, mu, V) %>% data.frame()
  names(x_df_org) <- paste0("x_", 1:4)
  x_df_org$interaktion <- x_df_org[, 1]*x_df_org[,3] # transform
  mu[p+1] <- mu[1]*mu[3]
  
  true_beta <- c(1, 1.5, -0.8, 0.5, 0.2,0.4)  
  # c(intercept, b1,b2,b3,b4,b_interaktion)
  
  x_matrix_org <- as.matrix(x_df_org)
  X_full <- cbind(1, x_matrix_org)  # add intercept
  
  Y <- X_full %*% true_beta + rnorm(n,0,1)
  data_inter<- cbind(x_df_org,Y)
  
    data_inter_mar <- data_inter
  # Create Missing (MAR)
  miss_obs_x1 <- 0.5 + 2 * data_inter_mar$x_2 - 0.7 * data_inter_mar$x_3 + rnorm(n, 0, 3)
  mis_mar_p <- miss_obs_x1 < quantile(miss_obs_x1, 0.3)
  data_inter_mar$x_1[mis_mar_p] <- NA
  data_inter_mar$interaktion <- data_inter_mar$x_1*data_inter_mar$x_3
  return(data_inter_mar)
}
```

# Imputate missing data (Squared)

```{r}
results_of_all_methods <- list (
  "pmm_imp_first" = list(),
  "pmm_trans_first" = list(),
  #pmm_3rd_method" = list(),
  "rf_imp_first" = list(),
  "rf_trans_first" = list()#,
  #"reg_3rd_method" = list()
)

results_imp_first <- list()
results_trans_first <- list()

iterations <- 10 #1000
n_imp <- 5 #Hippel sagt 40 ?


for (i in 1:iterations) {
  
  true_beta <- c(1, 1.5, -0.8, 0.5, 0.2,0.4) 
  data <- interaction_data(i)
  
  #Impute, then transform (PMM)-----------------------------

  imp_data_pmm_imp_first <- mice(data[, -which(names(data) == "interaktion")], seed = i, m = n_imp)

  model_pmm_imp_first <- with(imp_data_pmm_imp_first , lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))

  
  pooled_pmm_imp_first <- pool(model_pmm_imp_first)
  coeff_pmm_imp_first <- summary(pooled_pmm_imp_first)

  results_of_all_methods[["pmm_imp_first"]][[i]] <-
    calculate_metrics(coeff_pmm_imp_first, true_beta)

  #Transform then impute (PMM)--------------------------------------

  pred <- make.predictorMatrix(data)
  pred["x_1", "interaktion"] <- 0
  pred["interaktion", "x_1"] <- 0
  pred["x_3","interaktion"] <- 0
  pred["interaktion","x_3"] <- 0

  imp_data_pmm_trans_first <- mice(data,pred = pred, print = FALSE, seed = i, m = n_imp)

  model_pmm_trans_first <-
    with(imp_data_pmm_trans_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))
  pooled_pmm_trans_first <- pool(model_pmm_trans_first)
  coeff_pmm_trans_first <- summary(pooled_pmm_trans_first)


  results_of_all_methods[["pmm_trans_first"]][[i]] <-
    calculate_metrics(coeff_pmm_trans_first, true_beta)
  
  # Impute, then transform (RF)--------------------------
  imp_data_rf_imp_first <- mice(data[, -which(names(data) == "interaktion")],method = "rf", seed = i, m = n_imp)

  model_rf_impute_first <- with(imp_data_rf_imp_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))

  
  pooled_rf_imp_first <- pool(model_rf_impute_first)
  coeff_rf_imp_first <- summary(pooled_rf_imp_first)

  results_of_all_methods[["rf_imp_first"]][[i]] <-
    calculate_metrics(coeff_rf_imp_first, true_beta)
  
  # Transform, then impute (RF)
  
  imp_data_rf_trans_first <- mice(data,method = "rf",pred = pred, print = FALSE, seed = i, m = n_imp)


  model_rf_trans_first <-
    with(imp_data_rf_trans_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))
  pooled_rf_trans_first <- pool(model_rf_trans_first)
  coeff_rf_trans_first <- summary(pooled_rf_trans_first)


  results_of_all_methods[["rf_trans_first"]][[i]] <-
    calculate_metrics(coeff_rf_trans_first, true_beta)

}

```

# Calculate averages over all iterations of one method

```{r}

all_average_results <- list()

for (method_name in names(results_of_all_methods)) {
  method <- results_of_all_methods[[method_name]]
  avg_results <- data.frame(estimate = numeric(0), bias = numeric(0), coverage = numeric(0))

  for (covariate in row.names(method[[1]])) {
    coefficient <- mean(sapply(method, function(df)
        df[covariate, "estimate"]))
    bias <- mean(sapply(method, function(df)
        df[covariate, "bias"]))
    coverage <- mean(sapply(method, function(df)
        df[covariate, "cov"]))

    # Create a new data frame for the row to bind
    new_row <- data.frame(estimate = coefficient, bias = bias, coverage = coverage)

    # Bind the row while preserving column names
    avg_results <- rbind(avg_results, new_row)

    # Assign the row name
    row.names(avg_results)[nrow(avg_results)] <- covariate
  }
  all_average_results[[method_name]] <- avg_results
}

```

# Zusammengefasste Ergebnisse

```{r}
covariates_names <- c("Intercept", "X1", "X2", "X3", "X4", "X^2")

# Alle Koeffizienten gemeinsam ausgeben
all_coefficients <- sapply(all_average_results, function(df)
  df[,"estimate"])
rownames(all_coefficients) <- covariates_names

# Alle Biases ausgeben
all_biases <- sapply(all_average_results, function(df)
  df[,"bias"])
rownames(all_biases) <- covariates_names


# Alle Coverages ausgeben
all_coverages <- sapply(all_average_results, function(df)
  df[,"coverage"])
rownames(all_coverages) <- covariates_names

```
>>>>>>> 509877e7e906ad43021add338dc62d3552d2b382
=======
---
title: "Interaction"
format: html
editor: visual
---

```{r}
#| echo: false
pacman::p_load("VIM","rgl","MASS","tidyverse","mice","MASS")
```


# Function for calculating bias and coverage

```{r}
calculate_metrics <-
  function(coefficients, true_beta, ci_value = 1.96) {
    bias <- true_beta - coefficients$estimate

    ci_lower <- coefficients$estimate - ci_value  * coefficients$std.error
    ci_upper <- coefficients$estimate + ci_value  * coefficients$std.error
    cov <- ci_lower <= true_beta & true_beta <= ci_upper

    metrics <-
      cbind(coefficients, bias, cov) 
    # man könnte überlegen, auch noch die CI grenzen zu speichern
}
```

# Function Generated Data (Interaction)
```{r}
interaction_data <- function(seed){
  set.seed(i)
  p <- 4    #variables
  n <- 1000 #observations
  
  # draw expected values:
  mu <- (runif(p,-1,5))
  A <- matrix(rnorm(p^2), p, p)
  A <- t(A) %*% A             
  V <- cov2cor(A)           
  
  # Datenframe
  x_df_org <- mvrnorm(n, mu, V) %>% data.frame()
  names(x_df_org) <- paste0("x_", 1:4)
  x_df_org$interaktion <- x_df_org[, 1]*x_df_org[,3] # transform
  mu[p+1] <- mu[1]*mu[3]
  
  true_beta <- c(1, 1.5, -0.8, 0.5, 0.2,0.4)  
  # c(intercept, b1,b2,b3,b4,b_interaktion)
  
  x_matrix_org <- as.matrix(x_df_org)
  X_full <- cbind(1, x_matrix_org)  # add intercept
  
  Y <- X_full %*% true_beta + rnorm(n,0,1)
  data_inter<- cbind(x_df_org,Y)
  
    data_inter_mar <- data_inter
  # Create Missing (MAR)
  miss_obs_x1 <- 0.5 + 2 * data_inter_mar$x_2 - 0.7 * data_inter_mar$x_3 + rnorm(n, 0, 3)
  mis_mar_p <- miss_obs_x1 < quantile(miss_obs_x1, 0.3)
  data_inter_mar$x_1[mis_mar_p] <- NA
  data_inter_mar$interaktion <- data_inter_mar$x_1*data_inter_mar$x_3
  return(data_inter_mar)
}
```

# Imputate missing data (Squared)

```{r}
results_of_all_methods <- list (
  "pmm_imp_first" = list(),
  "pmm_trans_first" = list(),
  #pmm_3rd_method" = list(),
  "rf_imp_first" = list(),
  "rf_trans_first" = list()#,
  #"reg_3rd_method" = list()
)

results_imp_first <- list()
results_trans_first <- list()

iterations <- 10 #1000
n_imp <- 5 #Hippel sagt 40 ?


for (i in 1:iterations) {
  
  true_beta <- c(1, 1.5, -0.8, 0.5, 0.2,0.4) 
  data <- interaction_data(i)
  
  #Impute, then transform (PMM)-----------------------------

  imp_data_pmm_imp_first <- mice(data[, -which(names(data) == "interaktion")], seed = i, m = n_imp)

  model_pmm_imp_first <- with(imp_data_pmm_imp_first , lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))

  
  pooled_pmm_imp_first <- pool(model_pmm_imp_first)
  coeff_pmm_imp_first <- summary(pooled_pmm_imp_first)

  results_of_all_methods[["pmm_imp_first"]][[i]] <-
    calculate_metrics(coeff_pmm_imp_first, true_beta)

  #Transform then impute (PMM)--------------------------------------

  pred <- make.predictorMatrix(data)
  pred["x_1", "interaktion"] <- 0
  pred["interaktion", "x_1"] <- 0
  pred["x_3","interaktion"] <- 0
  pred["interaktion","x_3"] <- 0

  imp_data_pmm_trans_first <- mice(data,pred = pred, print = FALSE, seed = i, m = n_imp)

  model_pmm_trans_first <-
    with(imp_data_pmm_trans_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))
  pooled_pmm_trans_first <- pool(model_pmm_trans_first)
  coeff_pmm_trans_first <- summary(pooled_pmm_trans_first)


  results_of_all_methods[["pmm_trans_first"]][[i]] <-
    calculate_metrics(coeff_pmm_trans_first, true_beta)
  
  # Impute, then transform (RF)--------------------------
  imp_data_rf_imp_first <- mice(data[, -which(names(data) == "interaktion")],method = "rf", seed = i, m = n_imp)

  model_rf_impute_first <- with(imp_data_rf_imp_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))

  
  pooled_rf_imp_first <- pool(model_rf_impute_first)
  coeff_rf_imp_first <- summary(pooled_rf_imp_first)

  results_of_all_methods[["rf_imp_first"]][[i]] <-
    calculate_metrics(coeff_rf_imp_first, true_beta)
  
  # Transform, then impute (RF)
  
  imp_data_rf_trans_first <- mice(data,method = "rf",pred = pred, print = FALSE, seed = i, m = n_imp)


  model_rf_trans_first <-
    with(imp_data_rf_trans_first, lm(Y ~ x_1 + x_2 + x_3 + x_4 + x_1*x_3))
  pooled_rf_trans_first <- pool(model_rf_trans_first)
  coeff_rf_trans_first <- summary(pooled_rf_trans_first)


  results_of_all_methods[["rf_trans_first"]][[i]] <-
    calculate_metrics(coeff_rf_trans_first, true_beta)

}

```

# Calculate averages over all iterations of one method

```{r}

all_average_results <- list()

for (method_name in names(results_of_all_methods)) {
  method <- results_of_all_methods[[method_name]]
  avg_results <- data.frame(estimate = numeric(0), bias = numeric(0), coverage = numeric(0))

  for (covariate in row.names(method[[1]])) {
    coefficient <- mean(sapply(method, function(df)
        df[covariate, "estimate"]))
    bias <- mean(sapply(method, function(df)
        df[covariate, "bias"]))
    coverage <- mean(sapply(method, function(df)
        df[covariate, "cov"]))

    # Create a new data frame for the row to bind
    new_row <- data.frame(estimate = coefficient, bias = bias, coverage = coverage)

    # Bind the row while preserving column names
    avg_results <- rbind(avg_results, new_row)

    # Assign the row name
    row.names(avg_results)[nrow(avg_results)] <- covariate
  }
  all_average_results[[method_name]] <- avg_results
}

```

# Zusammengefasste Ergebnisse

```{r}
covariates_names <- c("Intercept", "X1", "X2", "X3", "X4", "X^2")

# Alle Koeffizienten gemeinsam ausgeben
all_coefficients <- sapply(all_average_results, function(df)
  df[,"estimate"])
rownames(all_coefficients) <- covariates_names

# Alle Biases ausgeben
all_biases <- sapply(all_average_results, function(df)
  df[,"bias"])
rownames(all_biases) <- covariates_names


# Alle Coverages ausgeben
all_coverages <- sapply(all_average_results, function(df)
  df[,"coverage"])
rownames(all_coverages) <- covariates_names

```
